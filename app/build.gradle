apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.onedelay.boostcampassignment"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode buildVersionCode()
        versionName buildVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    androidExtensions {
        experimental = true
    }

    signingConfigs {
        ide {
            storeFile file('../keystores/movie.keystore')
            storePassword keystore_pass
            keyAlias key_alias
            keyPassword key_pass
        }
    }

    buildTypes {
        debug {
            ext.crashlyticsApiSecret = "910a9d26a1787968a51305361d499e6109b998cfdd138faa23b052cb44dc46a8"
            ext.betaDistributionGroupAliases = "wjy"

            applicationIdSuffix ".debug"
            debuggable true
            signingConfig signingConfigs.ide
        }

        qa {
            ext.crashlyticsApiSecret = "ee8c7deb0772ec03f3dad867ee88478bc0d14964b0ff214059f98814b5229f96"
            ext.betaDistributionGroupAliases = "wjy"

            applicationIdSuffix ".qa"
            debuggable true
            signingConfig signingConfigs.ide
        }

        release {
            ext.crashlyticsApiSecret = "7dc937f96eb44e317da7c2c2679486dc9731bd65e6fac5dcf3da94bee8f80b1b"
            ext.betaDistributionGroupAliases = "wjy"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.ide
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "app-movie-${movieVersion}.apk"
        }
    }
}

def support_library_version = "28.0.0"
def retrofit_version = "2.4.0"
def dagger_version = "2.24"

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.android.support:recyclerview-v7:$support_library_version"
    implementation "com.android.support:design:$support_library_version"
    implementation "com.android.support.constraint:constraint-layout:1.1.3"
    testImplementation "junit:junit:4.12"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"

    // 이미지 로딩 라이브러리
    implementation 'com.github.bumptech.glide:glide:4.9.0'

    // API 접근
    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit_version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.5"
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "com.jakewharton.rxrelay2:rxrelay:2.1.1"

    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    // DI
    implementation "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    implementation "com.google.dagger:dagger-android:${dagger_version}"
    implementation "com.google.dagger:dagger-android-support:${dagger_version}"
    kapt "com.google.dagger:dagger-android-processor:${dagger_version}"

    implementation "android.arch.lifecycle:extensions:1.1.1"
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

import com.crashlytics.tools.utils.PropertiesUtils

//https://gist.github.com/alexsinger/2b5b1b7ae2d2fca1ffdb
File crashlyticsProperties = new File("${project.projectDir.absolutePath}/fabric.properties")
android.applicationVariants.all { variant ->
    def variantSuffix = variant.name.capitalize()
    def generateResourcesTask = project.tasks.getByName("fabricGenerateResources${variantSuffix}")
    def generatePropertiesTask = task("fabricGenerateProperties${variantSuffix}") {
        doLast {
            Properties properties = new Properties()
            println "...copying apiSecret for ${variant.name}"
            properties.put("apiSecret", variant.buildType.ext.crashlyticsApiSecret)
            PropertiesUtils.injectPropertyInFile(crashlyticsProperties, properties, "")
        }
    }
    generateResourcesTask.dependsOn generatePropertiesTask
}
